// SPDX-License-Identifier: No-Licence

 pragma solidity ^0.8.12;

contract Marathon{

    uint256 _number;
    string _message;
    address _owner;
    uint256 public withdrawamount;
    

    constructor(string memory _race){
        _number = 1;
        _message = _race; 
        _owner = msg.sender;
    }

    function printMessage() public view returns (string memory){
        return _message;
    }


  
    function number() public view returns (uint256) {
        return  _number;
    }

    function addition(uint256 a, uint256 b) public pure returns(uint256){
        return a+b;
    } 
      function substraction(uint256 a, uint256 b) public pure returns(uint256){
        return a-b;
    } 
      function multiplication(uint256 a, uint256 b) public pure returns(uint256){
        return a*b;
    } 



    function setMessage(string memory newMessage) external payable{
        require (_owner == msg.sender, "Set MESSAGE ONLY OWNER FUNCTION");
        require (msg.value == 10 ," send some wei");
        _message=newMessage;
    }

    function transferOwnership(address newOwner) external{
        require(_owner== msg.sender , "only Owner function");
        _owner = newOwner;
    }

    function withdrawFunds(uint256 amount, address recipient) external payable{
        //require (_owner == msg.sender, "only OWNER FUNCTION");
        uint256 totalbalance = address (this).balance;
        require(amount<totalbalance,"insufficient balance");
        payable(recipient).transfer(amount);
        withdrawamount=withdrawamount+amount; 

        



        
    }



   

}